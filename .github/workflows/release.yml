name: Release
on:
  push:
    branches:
      - master

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Install Dependencies
        run: pnpm install

      - name: Generate version.json
        run: |
          VERSION=$(grep '"version"' package.json | cut -d '"' -f 4)
          COMMIT=$(git rev-parse HEAD)
          DATE=$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")
          echo "{
            \"Version\": \"${VERSION}\",
            \"Commit\": \"${COMMIT}\",
            \"Date\": \"${DATE}\",
            \"ElectronBuildId\": \"${{ github.run_id }}\"
          }" > ./build.json

      - name: Move version.json into build directory
        run: |
          mv build.json resources/build.json

      - name: Build Mac
        if: matrix.os == 'macos-latest'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: pnpm run build:mac

      - name: Build Windows
        if: matrix.os == 'windows-latest'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: pnpm run build:win

      - name: Build Linux
        if: matrix.os == 'ubuntu-latest'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: pnpm run build:linux

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: electron-artifacts-${{ matrix.os }}
          path: |
            dist/*.exe
            dist/*.zip
            dist/*.dmg
            dist/*.AppImage
            dist/*.snap
            dist/*.deb
            dist/*.rpm
            dist/*.tar.gz
            dist/*.yml
            dist/*.blockmap
          if-no-files-found: ignore

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Install Dependencies
        run: pnpm install

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find all-artifacts -type f -not -path "*/\.*" | xargs -I {} cp {} release-assets/
          ls -la release-assets/

      - name: Extract version
        id: extract_version
        run: |
          VERSION=$(grep '"version"' package.json | cut -d '"' -f 4)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

      - name: Get latest tag
        id: get_tag
        run: |
          TAG=$(git describe --tags --abbrev=0)
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          draft: false
          files: |
            release-assets/*
          token: ${{ secrets.GITHUB_TOKEN }}
